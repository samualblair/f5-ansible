---
- name: Gather Facts with HTTP REST API - Directly not with ansible.builtin.uri - not F5 Module v2
  hosts: bigip
  connection: local
  gather_facts: false

  vars_prompt:

    - name: "ansible_user"
      prompt: "What is your username? "
      private: false

    - name: "ansible_password"
      prompt: "What is your password? "
      private: true

    - name: "snmpv3_password_1"
      prompt: "What is your BASE64 ENCODED SNMPv3 User_1 Auth and Privacy Password for BIG-IPs?"
      private: true
      default: FAKEDEFAULT

    - name: "ladap_auth_bindpassword"
      prompt: "What is your BASE64 ENCODED LDAP Auth Bind Password for BIG-IPs?"
      private: true
      default: FAKEDEFAULT

    - name: "tacacs_auth_secret"
      prompt: "What is your (not base 64) TACACS Auth Secret Password for BIG-IPs?"
      private: true
      default: FAKEDEFAULT

  vars: # Import CSV File
    csvfile: "{{ lookup('file', '../../variables/device_variables.csv') }}"

    f5_login_json: "{{ lookup('template', '../../templates/f5_web_auth.j2') }}" # Import login json

  tasks:

    - name: Python Script to create Vars list
      ansible.builtin.script:
        cmd: ../../scripts/vars_parse.py
        executable: /usr/bin/python3
      register: python_result
      delegate_to: localhost

    - name: Include YAML style Vars from Python Output
      ansible.builtin.set_fact:
        devices: "{{ python_result.stdout }}"
      delegate_to: localhost

    - name: Include Only Device relevent facts
      ansible.builtin.set_fact:
        thisdevice: "{{ item.unit }}"
      with_items: "{{ devices }}"
      when: "ansible_hostname in item.unit.hostname"
      loop_control:
        label: "Looping {{ item.unit.hostname }}"
      delegate_to: localhost

    - name: Set a fact named 'provider' with BIG-IP login information
      ansible.builtin.set_fact:
        provider_info:
          server: "{{ thisdevice.oob_mgmt_ip }}"
          user: "{{ ansible_user }}"
          password: "{{ ansible_password }}"
          server_port: 443
          validate_certs: false
          no_f5_teem: false
      delegate_to: localhost

    - name: Set a fact named 'provider' with BIG-IP login information
      ansible.builtin.set_fact:
        ansible_host: "{{ provider_info.server }}"
        ansible_user: "{{ provider_info.user }}"
        ansible_httpapi_password: "{{ provider_info.password }}"
        ansible_httpapi_port: "{{ provider_info.server_port }}"
        ansible_network_os: f5networks.f5_bigip.bigip
        ansible_httpapi_use_ssl: true
        ansible_httpapi_validate_certs: "{{ provider_info.validate_certs }}"
      delegate_to: localhost

    # Login portion for REST API
    - name: Login and Obtain Token
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}:443/mgmt/shared/authn/login"
        method: POST
        body: "{{ f5_login_json }}"
        body_format: json
        status_code:
          - 200
        timeout: 300
        force_basic_auth: true
        user: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: false
      delegate_to: localhost
      register: f5_login_token

    - name: Gather Static configured MACs
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}:443/mgmt/tm/net/arp"
        method: GET
        headers:
          X-F5-Auth-Token: "{{ f5_login_token.json.token.token }}"
        status_code:
          - 200
          - 202
        timeout: 300
        validate_certs: false
      delegate_to: localhost
      register: mac_static

    - name: Gather MAC ARP Table
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}:443/mgmt/tm/net/arp/stats"
        method: GET
        headers:
          X-F5-Auth-Token: "{{ f5_login_token.json.token.token }}"
        status_code:
          - 200
          - 202
        timeout: 300
        validate_certs: false
      delegate_to: localhost
      register: mac_dynamic

    - name: DISPLAY Dynamic ARP Table
      ansible.builtin.debug:
        var: mac_dynamic

    - name: DISPLAY Static ARP Table
      ansible.builtin.debug:
        var: mac_static

    # - name: Save some facts to file # noqa: run-once[task]
    #   ansible.builtin.copy:
    #     content: "{{ other_facts }}"
    #     dest: "../../output/full_facts_2.json"
    #     # Set permissions using octal so leading 0 , set to User=RW , Group=R , Other=R
    #     mode: "0644"
    #   run_once: true
    #   delegate_to: localhost
