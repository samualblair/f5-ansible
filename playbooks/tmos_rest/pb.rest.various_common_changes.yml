---
- name: Various REST changes
  hosts: bigip
  connection: local
  gather_facts: false

  vars_prompt:

    - name: "ansible_user"
      prompt: "What is your username? "
      private: false

    - name: "ansible_password"
      prompt: "What is your password? "
      private: true

    - name: "snmpv3_password_1"
      prompt: "What is your BASE64 ENCODED SNMPv3 User_1 Auth and Privacy Password for BIG-IPs?"
      private: true
      default: FAKEDEFAULT

    - name: "ladap_auth_bindpassword"
      prompt: "What is your BASE64 ENCODED LDAP Auth Bind Password for BIG-IPs?"
      private: true
      default: FAKEDEFAULT

    - name: "tacacs_auth_secret"
      prompt: "What is your (not base 64) TACACS Auth Secret Password for BIG-IPs?"
      private: true
      default: FAKEDEFAULT

  vars: # Import CSV File
    csvfile: "{{ lookup('file', '../../variables/device_variables.csv') }}"

  tasks:

    - name: Python Script to create Vars list
      ansible.builtin.script:
        cmd: ../../scripts/vars_parse.py
        executable: /usr/bin/python3
      register: python_result

    - name: Include YAML style Vars from Python Output
      ansible.builtin.set_fact:
        devices: "{{ python_result.stdout }}"

    - name: Include Only Device relevent facts
      ansible.builtin.set_fact:
        thisdevice: "{{ item.unit }}"
      with_items: "{{ devices }}"
      when: "ansible_hostname in item.unit.hostname"
      loop_control:
        label: "Looping {{ item.unit.hostname }}"

    - name: Set a fact named 'provider' with BIG-IP login information
      ansible.builtin.set_fact:
        provider_info:
          server: "{{ thisdevice.oob_mgmt_ip }}"
          user: "{{ ansible_user }}"
          password: "{{ ansible_password }}"
          server_port: 443
          validate_certs: false

# Set DNS
    - name: Set DNS for DC1 or DC3
      f5networks.f5_modules.bigip_device_dns:
        provider: "{{ provider_info }}"
        ip_version: 4
        name_servers:
          - 203.0.113.2
          - 203.0.113.3
        search:
          - example1.local
          - example2.local
      when: thisdevice.device_dc_location == "dc1" or thisdevice.device_dc_location == "dc3"

    - name: Set DNS for DC2
      f5networks.f5_modules.bigip_device_dns:
        provider: "{{ provider_info }}"
        ip_version: 4
        name_servers:
          - 203.0.113.4
          - 203.0.113.5
        search:
          - example1.local
          - example2.local
      when: thisdevice.device_dc_location == "dc2"

# Set NTP
    - name: Set NTP OR
      f5networks.f5_modules.bigip_device_ntp:
        provider: "{{ provider_info }}"
        ntp_servers:
          - 203.0.113.2
          - 203.0.113.3
          - 203.0.113.4
        timezone: US/Central
      when: thisdevice.device_location_state == "OR"

    - name: Set NTP WA
      f5networks.f5_modules.bigip_device_ntp:
        provider: "{{ provider_info }}"
        ntp_servers:
          - 203.0.113.4
          - 203.0.113.5
          - 203.0.113.2
        timezone: US/Central
      when: thisdevice.device_location_state == "WA"

# Set Common Paramaters

# Set HTTPD Lockdown - TLSv1.3 is also allowed
    - name: Set HTTPD
      f5networks.f5_modules.bigip_device_httpd:
        provider: "{{ provider_info }}"
        allow:
          - 10.0.0.0/8
          - 172.16.0.0/12
          - 192.168.0.0/16
        auth_pam_dashboard_timeout: true
        auth_pam_idle_timeout: 900
        ssl_protocols:
          - TLSv1.2
        ssl_cipher_suite:
          - TLS13-AES128-GCM-SHA256
          - TLS13-AES256-GCM-SHA384
          - TLS13-CHACHA20-POLY1305-SHA256
          - ECDHE-RSA-AES128-GCM-SHA256
          - ECDHE-RSA-AES256-GCM-SHA384
          - ECDHE-ECDSA-AES128-GCM-SHA256
          - ECDHE-ECDSA-AES256-GCM-SHA384

# SSH doesn't set locked down ciphers
    - name: Set SHHD
      f5networks.f5_modules.bigip_device_sshd:
        provider: "{{ provider_info }}"
        allow:
          - 10.0.0.0/8
          - 172.16.0.0/12
          - 192.168.0.0/16
        inactivity_timeout: 900

    - name: Set Syslog
      f5networks.f5_modules.bigip_remote_syslog:
        provider: "{{ provider_info }}"
        name: Syslog_1
        remote_host: "{{ thisdevice.syslog_server_1_address }}"
        remote_port: "{{ thisdevice.syslog_server_1_port }}"

    - name: Set SNMP General
      f5networks.f5_modules.bigip_snmp:
        provider: "{{ provider_info }}"
        contact: IT Team
        location: "{{ thisdevice.snmp_location }}"
        allowed_addresses:
          - 127.0.0.0/8
          - 10.0.0.0/8
          - 172.16.0.0/12
          - 192.168.0.0/16

    - name: Set SNMP Community
      f5networks.f5_modules.bigip_snmp_community:
        provider: "{{ provider_info }}"
        version: v3
        snmp_username: user_snmp
        snmp_auth_protocol: sha
        snmp_auth_password: "{{ snmpv3_password_1 }}"
        snmp_privacy_protocol: aes
        snmp_privacy_password: "{{ snmpv3_password_1 }}"
        oid: .1
        access: ro

# Not setting any SNMP Trap at this time
# Remove the default 'public' SNMP community
    - name: Set SNMP Community
      f5networks.f5_modules.bigip_snmp_community:
        provider: "{{ provider_info }}"
        name: public
        source: default
        state: absent

# Update to new TACACS+ Servers
    - name: Set Auth
      f5networks.f5_modules.bigip_device_auth:
        provider: "{{ provider_info }}"
        type: tacacs
        authentication: use-all-servers
        protocol_name: ip
        secret: "{{ tacacs_auth_secret }}"
        servers:
          - 203.0.113.3
          - 203.0.113.5
        service_name: ppp
        use_for_auth: true

# Update to new Remote User Roles
    - name: Set Remote User Role LDAP_Admins
      f5networks.f5_modules.bigip_remote_role:
        provider: "{{ provider_info }}"
        name: IT_LDAP_F5_Admins
        line_order: 1
        attribute_string: memberOF=CN=IT Team Network Admins,OU=Roles,OU=Admin,DC=example,DC=com
        remote_access: true
        assigned_role: administrator
        partition_access: all
        terminal_access: tmsh

    - name: Set Remote User Role LDAP_Engineers
      f5networks.f5_modules.bigip_remote_role:
        provider: "{{ provider_info }}"
        name: IT_LDAP_F5_Engineers
        line_order: 2
        attribute_string: memberOF=CN=IT Team F5 Engineers,OU=Admin Groups,OU=Enterprise Groups,DC=example,DC=com
        remote_access: true
        assigned_role: manager
        partition_access: all
        terminal_access: tmsh

    - name: Set Remote User Role TACACS_Admins
      f5networks.f5_modules.bigip_remote_role:
        provider: "{{ provider_info }}"
        name: IT_TACACS_Admins
        line_order: 3
        attribute_string: F5-LTM-User-Info-1=adm
        remote_access: true
        assigned_role: administrator
        partition_access: all
        terminal_access: tmsh

    - name: Set Remote User Role TACACS_Engineers
      f5networks.f5_modules.bigip_remote_role:
        provider: "{{ provider_info }}"
        name: IT_TACACS_Engineers
        line_order: 4
        attribute_string: F5-LTM-User-Info-1=eng
        remote_access: true
        assigned_role: auditor
        partition_access: all
        terminal_access: tmsh

    - name: Set Remote User Role TACACS_ADC_Auditor
      f5networks.f5_modules.bigip_remote_role:
        provider: "{{ provider_info }}"
        name: TACACS_ADC_Auditor
        line_order: 50
        attribute_string: F5-LTM-User-Info-1=RO
        remote_access: true
        assigned_role: auditor
        partition_access: all
        terminal_access: tmsh

    - name: Configure GUI Login Banner
      f5networks.f5_modules.bigip_sys_global:
        provider: "{{ provider_info }}"
        gui_setup: false
        security_banner: true
        banner_text: "[WARNING]\nAuthorized users only.\n\nUnauthorized or improper use may result in civil and criminal penalties."

# Force create a new custom named certificate to replace not expired certificate
# This would be device management cert, used with GUI, REST, iQuery, and other management - but not with Cluster Management
    # - name: Force create a new custom named certificate to replace not expired certificate
    #   f5networks.f5_modules.bigip_device_certificate:
    #     provider: "{{ provider_info }}"
    #     days_valid: 365
    #     cert_name: custom.crt
    #     key_name: custom.key
    #     new_cert: true
    #     force: true
    #     issuer:
    #       country: US
    #       state: WA
    #       common_name: foobar.foo.local
    #     key_size: 2048
